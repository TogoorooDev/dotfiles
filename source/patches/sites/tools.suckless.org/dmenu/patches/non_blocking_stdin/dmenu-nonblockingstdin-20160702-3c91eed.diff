diff --git a/dmenu.1 b/dmenu.1
index d3ab805..00958cf 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -4,7 +4,6 @@ dmenu \- dynamic menu
 .SH SYNOPSIS
 .B dmenu
 .RB [ \-b ]
-.RB [ \-f ]
 .RB [ \-i ]
 .RB [ \-l
 .RB [ \-m
@@ -41,10 +40,6 @@ which lists programs in the user's $PATH and runs the result in their $SHELL.
 .B \-b
 dmenu appears at the bottom of the screen.
 .TP
-.B \-f
-dmenu grabs the keyboard before reading stdin.  This is faster, but will lock up
-X until stdin reaches end\-of\-file.
-.TP
 .B \-i
 dmenu matches menu items case insensitively.
 .TP
diff --git a/dmenu.c b/dmenu.c
index e926eca..dc81ef2 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -1,12 +1,15 @@
 /* See LICENSE file for copyright and license details. */
 #include <ctype.h>
+#include <fcntl.h>
 #include <locale.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <strings.h>
 #include <time.h>
+#include <unistd.h>
 
+#include <sys/select.h>
 #include <X11/Xlib.h>
 #include <X11/Xatom.h>
 #include <X11/Xutil.h>
@@ -30,6 +33,7 @@ enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; /* color schemes */
 struct item {
 	char *text;
 	struct item *left, *right;
+	struct item *next;
 	int out;
 };
 
@@ -172,6 +176,7 @@ drawmenu(void)
 		}
 	}
 	drw_map(drw, win, 0, 0, mw, mh);
+	XFlush(dpy);
 }
 
 static void
@@ -200,6 +205,7 @@ match(void)
 	int i, tokc = 0;
 	size_t len, textsize;
 	struct item *item, *lprefix, *lsubstr, *prefixend, *substrend;
+	int preserve = 0;
 
 	strcpy(buf, text);
 	/* separate input text into tokens to be matched individually */
@@ -210,19 +216,24 @@ match(void)
 
 	matches = lprefix = lsubstr = matchend = prefixend = substrend = NULL;
 	textsize = strlen(text);
-	for (item = items; item && item->text; item++) {
+
+	for (item = items; item; item = item->next) {
 		for (i = 0; i < tokc; i++)
 			if (!fstrstr(item->text, tokv[i]))
 				break;
 		if (i != tokc) /* not all tokens match */
 			continue;
 		/* exact matches go first, then prefixes, then substrings */
-		if (!tokc || !fstrncmp(text, item->text, textsize))
+		if (!tokc || !fstrncmp(text, item->text, textsize)) {
 			appenditem(item, &matches, &matchend);
-		else if (!fstrncmp(tokv[0], item->text, len))
+			if (sel == item) preserve = 1;
+		} else if (!fstrncmp(tokv[0], item->text, len)) {
 			appenditem(item, &lprefix, &prefixend);
-		else
+			if (sel == item) preserve = 1;
+		} else {
 			appenditem(item, &lsubstr, &substrend);
+			if (sel == item) preserve = 1;
+		}
 	}
 	if (lprefix) {
 		if (matches) {
@@ -240,7 +251,9 @@ match(void)
 			matches = lsubstr;
 		matchend = substrend;
 	}
-	curr = sel = matches;
+	if (!preserve)
+		curr = sel = matches;
+
 	calcoffsets();
 }
 
@@ -456,36 +469,7 @@ paste(void)
 }
 
 static void
-readstdin(void)
-{
-	char buf[sizeof text], *p;
-	size_t i, imax = 0, size = 0;
-	unsigned int tmpmax = 0;
-
-	/* read each line from stdin and add it to the item list */
-	for (i = 0; fgets(buf, sizeof buf, stdin); i++) {
-		if (i + 1 >= size / sizeof *items)
-			if (!(items = realloc(items, (size += BUFSIZ))))
-				die("cannot realloc %u bytes:", size);
-		if ((p = strchr(buf, '\n')))
-			*p = '\0';
-		if (!(items[i].text = strdup(buf)))
-			die("cannot strdup %u bytes:", strlen(buf) + 1);
-		items[i].out = 0;
-		drw_font_getexts(drw->fonts, buf, strlen(buf), &tmpmax, NULL);
-		if (tmpmax > inputw) {
-			inputw = tmpmax;
-			imax = i;
-		}
-	}
-	if (items)
-		items[i].text = NULL;
-	inputw = items ? TEXTW(items[imax].text) : 0;
-	lines = MIN(lines, i);
-}
-
-static void
-run(void)
+readevent(void)
 {
 	XEvent ev;
 
@@ -513,6 +497,60 @@ run(void)
 }
 
 static void
+readstdin(void)
+{
+	static size_t max = 0;
+	static struct item **end = &items;
+
+	char buf[sizeof text], *p, *maxstr;
+	struct item *item;
+
+	/* read each line from stdin and add it to the item list */
+	while (fgets(buf, sizeof buf, stdin)) {
+		if (!(item = malloc(sizeof *item)))
+			die("cannot malloc %u bytes:", sizeof *item);
+		if ((p = strchr(buf, '\n')))
+			*p = '\0';
+		if (!(item->text = strdup(buf)))
+			die("cannot strdup %u bytes:", strlen(buf)+1);
+		if (strlen(item->text) > max) {
+			max = strlen(maxstr = item->text);
+			inputw = maxstr ? TEXTW(maxstr) : 0;
+		}
+		*end = item;
+		end = &item->next;
+		item->next = NULL;
+		item->out = 0;
+	}
+	match();
+	drawmenu();
+}
+
+static void
+run(void)
+{
+	fd_set fds;
+	int flags, xfd = XConnectionNumber(dpy);
+
+	if ((flags = fcntl(0, F_GETFL)) == -1)
+		die("cannot get stdin control flags:");
+	if (fcntl(0, F_SETFL, flags | O_NONBLOCK) == -1)
+		die("cannot set stdin control flags:");
+	for (;;) {
+		FD_ZERO(&fds);
+		FD_SET(xfd, &fds);
+		if (!feof(stdin))
+			FD_SET(0, &fds);
+		if (select(xfd + 1, &fds, NULL, NULL, NULL) == -1)
+			die("cannot multiplex input:");
+		if (FD_ISSET(xfd, &fds))
+			readevent();
+		if (FD_ISSET(0, &fds))
+			readstdin();
+	}
+}
+
+static void
 setup(void)
 {
 	int x, y;
@@ -600,7 +638,7 @@ setup(void)
 static void
 usage(void)
 {
-	fputs("usage: dmenu [-b] [-f] [-i] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
+	fputs("usage: dmenu [-b] [-i] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
 	      "             [-nb color] [-nf color] [-sb color] [-sf color] [-v]\n", stderr);
 	exit(1);
 }
@@ -608,7 +646,7 @@ usage(void)
 int
 main(int argc, char *argv[])
 {
-	int i, fast = 0;
+	int i;
 
 	for (i = 1; i < argc; i++)
 		/* these options take no arguments */
@@ -617,8 +655,6 @@ main(int argc, char *argv[])
 			exit(0);
 		} else if (!strcmp(argv[i], "-b")) /* appears at the bottom of the screen */
 			topbar = 0;
-		else if (!strcmp(argv[i], "-f"))   /* grabs keyboard before reading stdin */
-			fast = 1;
 		else if (!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
 			fstrncmp = strncasecmp;
 			fstrstr = cistrstr;
@@ -657,13 +693,7 @@ main(int argc, char *argv[])
 		die("no fonts could be loaded.\n");
 	lrpad = drw->fonts->h;
 
-	if (fast) {
-		grabkeyboard();
-		readstdin();
-	} else {
-		readstdin();
-		grabkeyboard();
-	}
+	grabkeyboard();
 	setup();
 	run();
 
